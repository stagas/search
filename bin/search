#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , path = require('path')
  , join = path.join
  , fs = require('fs');

// options

program
  .version('0.0.2')
  .usage('[options] <query> [path ...]')
  .option('-H, --hidden', 'search hidden files and directories')
  .option('-s, --span <lines>', 'number of lines to span result')
  .option('-c, --count', 'count results next to line numbers')
  .option('-0, --zero', 'start line counting at zero')
  .parse(process.argv);

// no args

if (!program.args.length) {
  process.stdout.write(program.helpInformation());
  process.exit(0);
}

// arguments

var query = program.args.shift()
  , paths = program.args
  , span = +program.span
  , pending = paths.length
  , re = new RegExp('(' + query + ')', 'ig');

// whitespace

process.on('exit', console.log);

// default to the CWD

if (!paths.length) paths.push(process.cwd());

/**
 * Search `path`.
 *
 * @param {String} path
 */

function search(path) {
  fs.stat(path, function(err, stat){
    if (err) throw err;
    if (stat.isDirectory()) {
      fs.readdir(path, function(err, files){
        if (err) throw err;
        files.filter(hidden).map(function(file){
          return join(path, file);
        }).forEach(search);
      });
    } else {
      var lines = [];
      fs.readFile(path, 'utf8', function(err, str){
        if (err) throw err;
        var docLines = str.split('\n');
        var count = 0;
        docLines.forEach(function(line, i){
          var match = line.match(re);
          if (!match) return;
          for (var n = span; n > 0; n--) {
            lines.push([i - n, docLines[i - n]]);
          }
          lines.push([ i, line, match.length]);
          for (var n = 1; n <= span; n++) {
            lines.push([i + n, docLines[i + n]]);
          }
        });

        if (lines.length) {
          var count = 0, space = '  ', linesUnique = {};
          lines.forEach(function(line, index){
            var i = line[0]
              , matches = line[2]
              , line = line[1];
            if (linesUnique[i]) {
              if (matches) linesUnique[i].matches = matches;
            } else {
              linesUnique[i] = {
                  i: i + (program.zero ? 0 : 1)
                , matches: matches
                , line: line
              };
            }
          });
          console.log('\n   \033[36m%s\033[0m', path);
          var last = 0;
          Object.keys(linesUnique).forEach(function(ln){
            var i = linesUnique[ln].i
              , matches = linesUnique[ln].matches
              , line = linesUnique[ln].line;
            if ('undefined' === typeof line) return;
            if (span && last + 1 != i && i != 0) {
              console.log(new Array(20).join(' '), '...');
            }
            last = i;
            line = line.replace(re, '\033[07;43m$1\033[0;90m');
            if (matches) count += matches;
            console.log(
                '%s%s %s\033[90m: %s\033[0m'
              , matches && '\033[37m' || '\033[90m'
              , program.count && matches
                ? ' \033[36m' + count + '\033[37m'
                : span && space || '  '
              , i, line
            );
            if (program.count)
              space = new Array(2 + count.toString().length).join(' ');
          });
          if (span && linesUnique[last - 1].i < docLines.length - 1) {
            console.log(new Array(20).join(' '), '...');
          }
          console.log('%s --- \033[33m%s\033[0;90m occurrences of \033[37m"%s"', space, count, query);
        }
      });
    }
  });
}

/**
 * Filter hidden paths unless `--hidden` is used.
 */

function hidden(path) {
  if (program.hidden) return true;
  return '.' != path[0];
}

/**
 * Search the given paths.
 */

paths.forEach(search);